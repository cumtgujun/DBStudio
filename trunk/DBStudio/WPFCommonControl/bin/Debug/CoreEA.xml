<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CoreEA</name>
    </assembly>
    <members>
        <member name="T:CoreEA.CommandTextBase">
            <summary>
            
            </summary>
        </member>
        <member name="M:CoreEA.CommandTextBase.#ctor(CoreEA.BaseRobot)">
            <summary>
            
            </summary>
            <param name="robot"></param>
        </member>
        <member name="P:CoreEA.CommandTextBase.CurrentRobot">
            <summary>
            Father of this command text 
            </summary>
        </member>
        <member name="M:CoreEA.CommandTextBase.GetRenameTableCmdStr(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="oldTableName"></param>
            <param name="newTableName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.CommandTextBase.GetRenameColumnCmdStr(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <param name="oldColumnName"></param>
            <param name="newColumnName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.CommandTextBase.GetDropColumnCmdStr(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.CommandTextBase.GetCreateIndexCmdStr(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="newIndexName"></param>
            <param name="tableName"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.CommandTextBase.GetDropIndexCmdStr(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <param name="indexName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.CommandTextBase.GetDropTableCmdStr(System.String)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.CommandTextBase.GetDropTableCmdStrWithCascade(System.String)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.CommandTextBase.GetResetIdentityColumn(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.CommandTextBase.GetFixedTableName(System.String)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="T:CoreEA.ConnSTR.DbConnectionString">
            <summary>
            
            </summary>
            <summary>
            Database connection string library
            </summary>
        </member>
        <member name="T:CoreEA.ConnSTR.DbConnectionString.Access2007">
            <summary>
            
            </summary>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.Access2007.GetOleDBString(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="database"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="T:CoreEA.ConnSTR.DbConnectionString.Access">
            <summary>
            
            </summary>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.Access.GetOdbcAccess(System.String,System.String,System.String)">
            <summary>
            return Acess ODBC string
            </summary>
            <param name="database"></param>
            <param name="senduid"></param>
            <param name="sendpwd"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.Access.GetOledbAccess(System.String,System.String,System.String)">
            <summary>
            return Acess OLEDB connection string
            </summary>
            <param name="database"></param>
            <param name="senduid"></param>
            <param name="sendpwd"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.Access.GetOleDbAccessWithPassword(System.String,System.String)">
            <summary>
            Return Access Connection String with Setting Password
            </summary>
            <param name="database"></param>
            <param name="pwd"></param>
            <returns></returns>
        </member>
        <member name="T:CoreEA.ConnSTR.DbConnectionString.DB2">
            <summary>
            
            </summary>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.DB2.OleDbConnection(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Ole db supported by .net 
            </summary>
            <param name="ipAddress"></param>
            <param name="db"></param>
            <param name="packCollection"></param>
            <param name="schema"></param>
            <param name="uid"></param>
            <param name="pwd"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.DB2.APPC(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            APPC
            </summary>
            <param name="alias"></param>
            <param name="remote"></param>
            <param name="db"></param>
            <param name="packCollection"></param>
            <param name="schema"></param>
            <param name="uid"></param>
            <param name="pwd"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.DB2.OleDb_IBM(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            IBM's OLE DB Provider (shipped with IBM DB2 UDB v7 or above)
            </summary>
            <param name="db"></param>
            <param name="server"></param>
            <param name="port"></param>
            <param name="uid"></param>
            <param name="pwd"></param>
            <returns></returns>
        </member>
        <member name="T:CoreEA.ConnSTR.DbConnectionString.EffiprozConnStr">
            <summary>
            
            </summary>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.EffiprozConnStr.GetConnectionString(CoreEA.LoginInfo.ConnectionType,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="connType"></param>
            <param name="dbname"></param>
            <param name="username"></param>
            <param name="pwd"></param>
            <returns></returns>
        </member>
        <member name="T:CoreEA.ConnSTR.DbConnectionString.Excel2007">
            <summary>
            
            </summary>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.Excel2007.GetOleDBString(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="database"></param>
            <param name="isFirstColumnRowName"></param>
            <returns></returns>
        </member>
        <member name="T:CoreEA.ConnSTR.DbConnectionString.Excel">
            <summary>
            
            </summary>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.Excel.GetConnectionString(System.String)">
            <summary>
            Get Connection String To Excel
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.Excel.GetOleDbConnectionString(System.String,System.Boolean)">
            <summary>
            Connect Ok
            
            </summary>
            <param name="file"></param>
            <param name="isFirstRowIsColumnName">
            "HDR=Yes;" indicates that the first row contains columnnames, not data. "HDR=No;" indicates the opposite.
            </param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.Excel.GetXlsx(System.String)">
            <summary>
            ACE OLEDB 12.0 Xlsx files
            
            "HDR=Yes;" indicates that the first row contains columnnames, not data. 
            "HDR=No;" indicates the opposite.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.Excel.GetXlsb(System.String)">
            <summary>
            This one is for connecting to Excel 2007 files with the Xlsb file extension. 
            That is the Office Open XML format saved in a binary format.
            I e the structure is similar but it's not saved in a text readable format 
            as the Xlsx files and can improve performance if the file contains a lot of data.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.Excel.GetXlsm(System.String)">
            <summary>
            This one is for connecting to Excel 2007 files with the Xlsm file extension. 
            That is the Office Open XML format with macros enabled.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="T:CoreEA.ConnSTR.DbConnectionString.MySql">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.ConnSTR.DbConnectionString.MySql.DefaultPort">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.ConnSTR.DbConnectionString.MySql.DefaultDatabaseName">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.ConnSTR.DbConnectionString.MySql.DefaultConnectionTimeout">
            <summary>
            Currnet this var was not used ,
            Based on .net framework 4, we used optional parameters instead.
            </summary>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.MySql.GetMySqlConnectionString(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            MySql server 
            </summary>
            <param name="i_server"></param>
            <param name="i_username"></param>
            <param name="i_pwd"></param>
            <param name="connTimeout"></param>
            <param name="defaultCommandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.MySql.GetMySqlConnectionString(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            MySql server with port
            </summary>
            <param name="i_server"></param>
            <param name="i_username"></param>
            <param name="i_pwd"></param>
            <param name="i_port"></param>
            <param name="connTimeout"></param>
            <param name="defaultCommandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.MySql.GetMySqlConnectionString(System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            MySql server with dbname and port
            </summary>
            <param name="i_server"></param>
            <param name="i_username"></param>
            <param name="i_pwd"></param>
            <param name="i_port"></param>
            <param name="dbname"></param>
            <param name="connTimeout"></param>
            <param name="defaultCommandTimeout"></param>
            <param name="isPolliing"></param>
            <returns></returns>
        </member>
        <member name="T:CoreEA.ConnSTR.DbConnectionString.Oracle">
            <summary>
            
            </summary>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.Oracle.ConnectionStringWithoutClient(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            No need to install Oracle client
            use tns
            </summary>
            <param name="ip"></param>
            <param name="port">1521</param>
            <param name="dbInstanceName"></param>
            <param name="uid"></param>
            <param name="pwd"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.Oracle.OracleXE(System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <param name="uid"></param>
            <param name="pwd"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.Oracle.StandardOledb_Security_FromMS(System.String,System.String,System.String)">
            <summary>
            Use Traditional OleDB Type to connect oracle
            </summary>
            <param name="server"></param>
            <param name="uid"></param>
            <param name="pwd"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.Oracle.TrustedConnection_MS(System.String)">
            <summary>
            
            </summary>
            <param name="server"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.Oracle.StandardOledb_Security_Oracele(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="server"></param>
            <param name="uid"></param>
            <param name="pwd"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.Oracle.TrustedConnection_Oracle(System.String)">
            <summary>
            
            </summary>
            <param name="server"></param>
            <returns></returns>
        </member>
        <member name="T:CoreEA.ConnSTR.DbConnectionString.Sqlite">
            <summary>
            For the sqlite.
            Notice ,only support sqlite3.0 or up
            </summary>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.Sqlite.Standard(System.String)">
            <summary>
            
            </summary>
            <param name="fileFullPath"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.Sqlite.StandardWithPwd(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="fileFullPath"></param>
            <param name="pwd"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.Sqlite.StandardWithUnicode(System.String)">
            <summary>
            
            </summary>
            <param name="fileFullPath"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.Sqlite.StandardWithReadOnly(System.String)">
            <summary>
            
            </summary>
            <param name="fileFullPath"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.Sqlite.Standard(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="fileFullPath"></param>
            <param name="IsReadOnly"></param>
            <param name="isUnicode"></param>
            <param name="Pwd"></param>
            <returns></returns>
        </member>
        <member name="T:CoreEA.ConnSTR.DbConnectionString.Sqlserver">
            <summary>
            
            </summary>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.Sqlserver.Standard(System.String,System.String,System.String,System.String)">
            <summary>
            Standard security
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.Sqlserver.Standard_WithTrustOrNot(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
             Get Sql Server 2005 Express CS
            </summary>
            <param name="server"></param>
            <param name="db"></param>
            <param name="uid"></param>
            <param name="pwd"></param>
            <param name="isTrust"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.Sqlserver.AttachFile(System.String,System.String)">
            <summary>
            Trusted Connection
            This is used when Intergration with windows authentication
            
            This is also same as
            <code>Server=myServerAddress;Database=myDataBase;Trusted_Connection=True;</code>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.Sqlserver.AttachFileEx(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="serverName"></param>
            <param name="dbFullPath"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.Sqlserver.ConnectionWithIP(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Connect via an IP address
            </summary>
            <param name="ip">like 192.143.33.34</param>
            <param name="port">1433 is the default</param>
            <param name="db"></param>
            <param name="uid"></param>
            <param name="pwd"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.Sqlserver.Connection_Mars(System.String,System.String)">
            <summary>
            Enabling MARS (multiple active result sets)
            Use ADO.NET 2.0 for MARS functionality. MARS is not supported in ADO.NET 1.0 nor ADO.NET 1.1.
            </summary>
            <param name="server"></param>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.Sqlserver.Connection_Mars_NoTrust(System.String,System.String,System.String,System.String)">
            <summary>
            Enabling MARS (multiple active result sets)
            Use ADO.NET 2.0 for MARS functionality. MARS is not supported in ADO.NET 1.0 nor ADO.NET 1.1.
            </summary>
            <param name="server"></param>
            <param name="db"></param>
            <param name="username"></param>
            <param name="pwd"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.Sqlserver.Connection_DbMirror(System.String,System.String,System.String)">
            <summary>
            If you connect with ADO.NET or the SQL Native Client to a database that is being mirrored,
            your application can take advantage of the drivers ability to automatically redirect connections when a database mirroring failover occurs. 
            You must specify the initial principal server and database in the connection string and the failover partner server.
            </summary>
            <param name="dbServer"></param>
            <param name="mirrorServer"></param>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.Sqlserver.UseUserInstanceOnLocal(System.String,System.String)">
            <summary>
            Using an User Instance on a local SQL Server Express instance
            
            The User Instance functionality creates a new SQL Server instance on the fly during connect. 
            This works only on a local SQL Server 2005 instance and only when connecting using windows authentication over local named pipes.
            The purpose is to be able to create a full rights SQL Server instance to a user with limited administrative rights on the computer.
            </summary>
            <param name="server"></param>
            <param name="dbFileFullPath"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.Sqlserver.GetOledbConnectionString_NoTrust(System.String,System.String,System.String,System.String)">
            <summary>
            This oledb connection is test passed to the online databases
            </summary>
            <param name="server"></param>
            <param name="uid"></param>
            <param name="pwd"></param>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.Sqlserver.SqlServerConnectionString(System.String,System.String,System.String,System.String)">
            <summary>
            Sql server
            </summary>
            <param name="server"></param>
            <param name="uid"></param>
            <param name="pwd"></param>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.Sqlserver.GetConnectionString(System.String,System.String,System.String,System.String)">
            <summary>
            data source may be:IP ADDRESS (such as :192.122.122.122:1433,)noticed 1433 it the por (by default)
            In fact sqlConnectionWay in not very well,compare with accessConnectionWay
            so,It maybe overrided any time if necessary
            </summary>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.Sqlserver.GetSqlServerExpressCS(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
             Get Sql Server 2005 Express CS
            </summary>
            <param name="server"></param>
            <param name="db"></param>
            <param name="uid"></param>
            <param name="pwd"></param>
            <param name="isTrust"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.Sqlserver.GetOledbConnectionString_Trust(System.String,System.String,System.String,System.String)">
            <summary>
            Get OleDb Connection To sql server
            </summary>
            <param name="server"></param>
            <param name="uid"></param>
            <param name="pwd"></param>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.Sqlserver.GetOdbcConnectionString(System.String,System.String,System.String,System.String)">
            <summary>
            Get odbc to sql server
            </summary>
            <param name="server"></param>
            <param name="uid"></param>
            <param name="pwd"></param>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="T:CoreEA.ConnSTR.DbConnectionString.SSCE">
            <summary>
            
            </summary>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.SSCE.GetSSCEConnectionString(System.String,System.String,System.Boolean)">
            <summary>
            Read Write
            Read Only
            Shared Read
            Exclusive
            </summary>
            <param name="dbName"></param>
            <param name="pwd"></param>
            <param name="Encrypt"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.SSCE.GetSSCEConnectionString(System.String,System.String,System.Boolean,CoreEA.Args.OpenModeClass,System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="dbFileFullPath"></param>
            <param name="pwd"></param>
            <param name="Encrypt"></param>
            <param name="curOpenMode"></param>
            <param name="maxBufferSize">Default is 1024 </param>
            <param name="maxDbSize">Default is 256 ,Max is 164091
            But we changed to default is 4000</param>
            <returns></returns>
        </member>
        <member name="T:CoreEA.ConnSTR.DbConnectionString.TxtFile">
            <summary>
            Text Based File 
            Like CSV...
            </summary>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.TxtFile.ODBC(System.String)">
            <summary>
            Notice : 
            the dbFolderName is just only the folder name 
            because the txt file name is the table name . 
            </summary>
            <param name="dbFolderName">the database folder</param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.TxtFile.OleDb_DelimitedColumns(System.String,System.Boolean)">
             <summary>
             The delimiter can be specified in the registry at the following location:
            HKEY_LOCAL_MACHINE \ SOFTWARE \ Microsoft \ Jet \ 4.0 \ Engines \ Text
            "Format" = "TabDelimited"
            or
            "Format" = "Delimited(;)"
             </summary>
             <param name="folderName">the database folder</param>
             <param name="HDR">"HDR=Yes;" indicates that the first row contains columnnames,
             not data. "HDR=No;" indicates the opposite.</param>
             <returns></returns>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.TxtFile.OleDb_FixedLengthColumn(System.String,System.Boolean)">
             <summary>
              "HDR=Yes;" indicates that the first row contains columnnames, not data. "HDR=No;" indicates the opposite.
            To specify each columns length use the Schema.ini file. See description below.
            Important note!
            The quota " in the string needs to be escaped using your language specific escape syntax.
            c#, c++   \"
            VB6, VBScript   ""
            xml (web.config etc)   &quot;
            or maybe use a single quota '.
            
             Schema.ini
            _
            The schema information file tells the driver about the format of the text files. The file is always located in the same folder as the text files and must be named schema.ini.	
            [customers.txt]
            Format=TabDelimited
            ColNameHeader=True
            MaxScanRows=0
            CharacterSet=ANSI
            [orders.txt]
            Format=Delimited(;)
            ColNameHeader=True
            MaxScanRows=0
            CharacterSet=ANSI
            [invoices.txt]
            Format=FixedLength
            ColNameHeader=False
            Col1=FieldName1 Integer Width 15
            Col2=FieldName2 Date Width 15
            Col3=FieldName3 Char Width 40
            Col4=FieldName4 Float Width 20
            CharacterSet=ANSI
             </summary>
             <param name="folderName"></param>
             <param name="HDR"></param>
             <returns></returns>
        </member>
        <member name="T:CoreEA.ConnSTR.DbConnectionString.VistaDB">
            <summary>
            
            </summary>
        </member>
        <member name="M:CoreEA.ConnSTR.DbConnectionString.VistaDB.VistaDb_Connection(System.String)">
            <summary>
            
            </summary>
            <param name="dbFullPath">such as D:\folder\myVistaDatabaseFile.vdb3</param>
            <returns></returns>
        </member>
        <member name="P:CoreEA.CSV.CSVRobot.CurrentCommandTextHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:CoreEA.CSV.CSVRobot.GetPrimaryKeysFromTable(System.String)">
            <summary>
            No Index Info
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.CSV.CSVRobot.GetSystemViewList">
            <summary>
            This db type don't has such views
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreEA.CSV.CSVRobot.GetProviderInfoFromTable(System.String)">
            <summary>
            Not Implement
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.CSV.CSVRobot.GetColumnNameAndTypeFromTable(System.String)">
            <summary>
            Due to the CSV has no detail scehma info . 
            It just has column name and value 
            So This method is very special for CSV
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.CSV.CSVRobot.GetTableListInDatabase(System.String)">
            <summary>
            
            </summary>
            <param name="databaseName">
            In access ,this para is not used ever
            Like SSCE ,Recommend use this base method with( no parameter)</param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.CSV.CSVRobot.Open(CoreEA.LoginInfo.BaseLoginInfo)">
            <summary>
            Here notice :
            The database in the connection is a folder name 
            And the database name is the file name
            In CSV the filename is just the database name and the table name 
            
            </summary>
            <param name="pInfo"></param>
        </member>
        <member name="M:CoreEA.CSV.CSVRobot.GetSchemaTable">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreEA.CSV.CSVRobot.CreateTable(CoreEA.SchemaInfo.BaseTableSchema)">
            <summary>
            
            </summary>
            <param name="ts"></param>
            <returns></returns>
        </member>
        <member name="P:CoreEA.Effiproz.EffiprozRobot.CurrentCommandTextHandler">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.Effiproz.EffiprozRobot.HostedType">
            <summary>
            
            </summary>
        </member>
        <member name="M:CoreEA.Effiproz.EffiprozRobot.BuildColumnStatement(CoreEA.SchemaInfo.BaseColumnSchema)">
            <summary>
            Used when creating the CREATE TABLE DDL. Creates a single row
            for the specified column.
            </summary>
            <param name="eachColumn">The column schema</param>
            <returns>A single column line to be inserted into the general CREATE TABLE DDL statement</returns>
        </member>
        <member name="M:CoreEA.Effiproz.EffiprozRobot.GetTableSchemaInfoObject(System.String)">
             <summary>
             Below is the column schema
             <TABLE_CAT>PUBLIC</TABLE_CAT>
             <TABLE_SCHEM>PUBLIC</TABLE_SCHEM>
             <TABLE_NAME>TEST</TABLE_NAME>
             <COLUMN_NAME>NAME</COLUMN_NAME>
             <DATA_TYPE>16</DATA_TYPE>
             <TYPE_NAME>VARCHAR2</TYPE_NAME>
             <COLUMN_SIZE>100</COLUMN_SIZE>
             <NUM_PREC_RADIX>0</NUM_PREC_RADIX>
             <NULLABLE>1</NULLABLE>
             <SQL_DATA_TYPE>12</SQL_DATA_TYPE>
             <CHAR_OCTET_LENGTH>100</CHAR_OCTET_LENGTH>
             <ORDINAL_POSITION>3</ORDINAL_POSITION>
             <IS_NULLABLE>true</IS_NULLABLE>
             <IS_AUTOINCREMENT>false</IS_AUTOINCREMENT>
            <TYPE_SUB>1</TYPE_SUB>
            <IS_PRIMARY_KEY>false</IS_PRIMARY_KEY>
             </summary>
             <param name="tableName"></param>
             <returns></returns>
        </member>
        <member name="M:CoreEA.Effiproz.EffiprozRobot.GetPrimaryKeysFromTable(System.String)">
            <summary>
            No Index Info
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.Effiproz.EffiprozRobot.GetSystemViewList">
            <summary>
            This db type don't has such views
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreEA.Effiproz.EffiprozRobot.GetProviderInfoFromTable(System.String)">
            <summary>
            Not Implement
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.Effiproz.EffiprozRobot.ChangePassword(CoreEA.SchemaInfo.UserTokenInfo)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.Effiproz.EffiprozRobot.GetDatabaseList">
            <summary>
            Effiproz is file based db
            so this will return empty
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreEA.Effiproz.EffiprozRobot.GetTableListInDatabase(System.String)">
            <summary>
            
            </summary>
            <param name="databaseName">
            In access ,this para is not used ever
            Like SSCE ,Recommend use this base method with( no parameter)</param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.Effiproz.EffiprozRobot.Open(CoreEA.LoginInfo.BaseLoginInfo)">
            <summary>
            Notice: 
            Because OleDB Suppor many db types . 
            So the UsingOleDbType property in LoginInfo should be specifed. otherwise will use default db type -->Here is Access
            </summary>
            <param name="pInfo"></param>
        </member>
        <member name="P:CoreEA.Excel.ExcelRobot.CurrentCommandTextHandler">
            <summary>
            
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CoreEA.Excel.ExcelRobot.GetTableSchemaInfoObject(System.String)" -->
        <member name="M:CoreEA.Excel.ExcelRobot.GetExcelColumnType(System.String)">
            <summary>
            Return string type oledby object 
            As to the p value ,please refer to the OleDBType enum
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.Excel.ExcelRobot.GetPrimaryKeysFromTable(System.String)">
            <summary>
            No Index Info
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.Excel.ExcelRobot.GetSystemViewList">
            <summary>
            This db type don't has such views
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreEA.Excel.ExcelRobot.GetProviderInfoFromTable(System.String)">
            <summary>
            Not Implement
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.Excel.ExcelRobot.GetTableListInDatabase(System.String)">
            <summary>
            
            </summary>
            <param name="databaseName">
            In access ,this para is not used ever
            Like SSCE ,Recommend use this base method with( no parameter)</param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.Excel.ExcelRobot.Open(CoreEA.LoginInfo.BaseLoginInfo)">
            <summary>
            Notice: 
            Because OleDB Suppor many db types . 
            So the UsingOleDbType property in LoginInfo should be specifed. otherwise will use default db type -->Here is Access
            </summary>
            <param name="pInfo"></param>
        </member>
        <member name="M:CoreEA.Excel.ExcelRobot.GetSchemaTable">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:CoreEA.Firebird.FriebirdRobot.CurrentCommandTextHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:CoreEA.InfrastructureInfo.BaseCreateDbObject">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.InfrastructureInfo.BaseCreateDbObject.DbName">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.InfrastructureInfo.BaseCreateDbObject.DbLocation">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.InfrastructureInfo.BaseCreateDbObject.DbLogFileLocation">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.InfrastructureInfo.BaseCreateDbObject.InitSize">
            <summary>
            /
            </summary>
        </member>
        <member name="P:CoreEA.InfrastructureInfo.BaseCreateDbObject.FileGrowth">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.Invalidation.InvalidationBase.IsFilterSqlKeyWords">
            <summary>
            Indicate whether filter the sql keywords or not . 
            If true , EA will replace sql sentences (such as Insert into ,Update,etc..)
            with quote string (\'insert into')
            
            Recomment : set true;
            </summary>
        </member>
        <member name="P:CoreEA.Invalidation.InvalidationBase.IsMashTheInvalidChar">
            <summary>
            If set true, the invalidation processin will 
            convert the invalid char to mash char 
            Such as if ' is invalid char , it will convert to "
            </summary>
        </member>
        <member name="M:CoreEA.Invalidation.InvalidationBase.IsInvalidSql(System.String)">
            <summary>
            Check whether the sql cmd is invalid or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreEA.Invalidation.InvalidationBase.FilterSqlKeywords(System.String)">
            <summary>
            Do filter sql keywords ,Current not complete
            </summary>
            <param name="sql"></param>
        </member>
        <member name="M:CoreEA.Invalidation.InvalidationBase.IsInvalidArguments(System.String)">
            <summary>
            Check whether the arguments send to the method is invalid or not
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.Invalidation.InvalidationBase.DetectSqlInjection(System.String)">
            <summary>
            A helper method to attempt to discover known SqlInjection attacks.  
            For use when using one of the flexible non-parameterized access methods, such as GetPaged()
            </summary>
            <param name="whereClause">string of the whereClause to check</param>
            <returns>true if found, false if not found </returns>
        </member>
        <member name="M:CoreEA.Invalidation.InvalidationBase.DetectSqlInjection(System.String,System.String)">
            <summary>
            A helper method to attempt to discover known SqlInjection attacks.  
            For use when using one of the flexible non-parameterized access methods, such as GetPaged()
            </summary>
            <param name="whereClause">string of the whereClause to check</param>
            <param name="orderBy">string of the orderBy clause to check</param>
            <returns>true if found, false if not found </returns>
        </member>
        <member name="T:CoreEA.Invalidation.InvalidatorForSqlCe">
            <summary>
            Especial for Sql Server Compact Edition 3.1
            </summary>
        </member>
        <member name="T:CoreEA.LoginInfo.LoginInfo_Effiproz">
            <summary>
            
            </summary>
        </member>
        <member name="M:CoreEA.LoginInfo.LoginInfo_Effiproz.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_Effiproz.DBConnectionType">
            <summary>
            Sets the "connection type" for the connection string. 
            The default is "memory".
            Valid values are "file" and "memory" 
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_Effiproz.Username">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_Effiproz.Password">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_Effiproz.IsolateLevel">
            <summary>
            Sets the default isolation level for transactions on the connection. 
            The default is ReadCommitted. 
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_Effiproz.InitialCatalog">
            <summary>
            Sets the database to open on the connection. 
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_Effiproz.IsAutoCommit">
            <summary>
            Sets the "auto commit" for the database connection. The default is false. 
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_Effiproz.IsAutoShutdown">
            <summary>
            Sets the "auto shutdown" for the database connection. 
            The default is false. 
            If true database is automatically checkpoint/shutdown when all 
            connections are closed (In-Memory databases will loose all data). 
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_Effiproz.CipherTypeString">
            <summary>
            string type
            Selects the encryption algorithm. Valid values are {DES, TripleDES, AES, Rijndael}. 
            Optional. 
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_Effiproz.CipherKey">
            <summary>
            The encryption algorithm initialization vector. Optional. 
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_Effiproz.CipherIV">
            <summary>
            The encryption algorithm initialization vector. Optional. 
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_Effiproz.IsEnList">
            <summary>
            Determines whether or not the connection will automatically participate in the current distributed transaction. Default is false. 
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_Effiproz.IsReadOnly">
            <summary>
            Sets the "readonly" for the database connection. The default is false. 
            </summary>
        </member>
        <member name="T:CoreEA.LoginInfo.CipherType">
            <summary>
             Optional Value 
            Default is None
            </summary>
        </member>
        <member name="F:CoreEA.LoginInfo.CipherType.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:CoreEA.LoginInfo.CipherType.DES">
            <summary>
            
            </summary>
        </member>
        <member name="F:CoreEA.LoginInfo.CipherType.TripleDES">
            <summary>
            
            </summary>
        </member>
        <member name="F:CoreEA.LoginInfo.CipherType.AES">
            <summary>
            
            </summary>
        </member>
        <member name="F:CoreEA.LoginInfo.CipherType.Rijndael">
            <summary>
            
            </summary>
        </member>
        <member name="T:CoreEA.LoginInfo.ConnectionType">
            <summary>
            
            </summary>
        </member>
        <member name="F:CoreEA.LoginInfo.ConnectionType.File">
            <summary>
            
            </summary>
        </member>
        <member name="F:CoreEA.LoginInfo.ConnectionType.Memory">
            <summary>
            
            </summary>
        </member>
        <member name="T:CoreEA.LoginInfo.LoginInfo_CSV">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_CSV.Database">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_CSV.Username">
            <summary>
            为什么需要用户名呢？谁能回答我下
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_CSV.Pwd">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_CSV.IsFirstRowIsColumnName">
            <summary>
            
            </summary>
        </member>
        <member name="T:CoreEA.LoginInfo.LoginInfo_Excel">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_Excel.IsFirstRowIsColumnName">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_Excel.Database">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_Excel.Username">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_Excel.Pwd">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_Excel.CurrentOleDBVersion">
            <summary>
            
            </summary>
        </member>
        <member name="T:CoreEA.LoginInfo.LoginInfo_Oracle">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_Oracle.HostName">
            <summary>
            Ipaddress or machine name
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_Oracle.SID">
            <summary>
            Server Instance Name
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_Oracle.Username">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_Oracle.Password">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_Oracle.Port">
            <summary>
            Default port  is 1521
            </summary>
        </member>
        <member name="T:CoreEA.LoginInfo.BaseLoginInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:CoreEA.LoginInfo.BaseLoginInfo.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:CoreEA.LoginInfo.LoginInfo_Firebird">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_Firebird.DataSource">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_Firebird.DataFile">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_Firebird.Username">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_Firebird.Password">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_Firebird.Dialect">
            <summary>
            Default:3
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_Firebird.Port">
            <summary>
            Default:3050
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_Firebird.MaxPollSize">
            <summary>
            Default:50
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_Firebird.MinPollSize">
            <summary>
            Default:0
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_Firebird.PacketSize">
            <summary>
            Default:8192
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_Firebird.ServerType">
            <summary>
            Default:0
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_Firebird.IsPolling">
            <summary>
            Default:true
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_Firebird.ConnectionLifeTime">
            <summary>
            Default:15
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_Firebird.CharSet">
            <summary>
            Default:None
            </summary>
        </member>
        <member name="M:CoreEA.LoginInfo.LoginInfo_Firebird.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:CoreEA.LoginInfo.LoginInfo_ForAllDbTypes">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_ForAllDbTypes.Server">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_ForAllDbTypes.Database">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_ForAllDbTypes.TableName">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_ForAllDbTypes.Username">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_ForAllDbTypes.Pwd">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_ForAllDbTypes.IsTrustedConn">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_ForAllDbTypes.IsUnicode">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_ForAllDbTypes.IsEncrypt">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_ForAllDbTypes.CurConnMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_ForAllDbTypes.AttachedFileName">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_ForAllDbTypes.Port">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_ForAllDbTypes.CurrentOleDBVersion">
            <summary>
            This only useful when oledb type
            Especially for office 2003 or 2007
            </summary>
        </member>
        <member name="T:CoreEA.LoginInfo.LoginInfo_MySql">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_MySql.Server">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_MySql.Database">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_MySql.Username">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_MySql.Pwd">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_MySql.Port">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_MySql.ConnectionTimeOut">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_MySql.IsPolling">
            <summary>
            
            </summary>
        </member>
        <member name="T:CoreEA.LoginInfo.LoginInfo_Oledb">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_Oledb.Database">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_Oledb.Username">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_Oledb.Pwd">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_Oledb.CurrentOleDBVersion">
            <summary>
            Office 2003 or 2007 or later version
            </summary>
        </member>
        <member name="T:CoreEA.LoginInfo.OleDBVersion">
            <summary>
            
            </summary>
        </member>
        <member name="F:CoreEA.LoginInfo.OleDBVersion.Is2003">
            <summary>
            
            </summary>
        </member>
        <member name="F:CoreEA.LoginInfo.OleDBVersion.Is2007">
            <summary>
            
            </summary>
        </member>
        <member name="T:CoreEA.LoginInfo.LoginInfo_Sqlite">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_Sqlite.DbFile">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_Sqlite.Pwd">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_Sqlite.IsUnicode">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_Sqlite.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="T:CoreEA.LoginInfo.LoginInfo_SqlServer">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_SqlServer.AttchFile">
            <summary>
            If attch file use this property
            
            The attach file mode need a sql server instance ,
            here we make the server name as the instance.
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_SqlServer.X_CurDbConnectionMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_SqlServer.IsTrustedConn">
            <summary>
            Used in Sqlserver
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_SqlServer.X_Server">
            <summary>
            Db Server name
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_SqlServer.X_Port">
            <summary>
            The db port to connect
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_SqlServer.X_UserName">
            <summary>
            login db username
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_SqlServer.X_Pwd">
            <summary>
            login db pwd
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_SqlServer.X_Database">
            <summary>
            database name
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_SqlServer.X_TableName">
            <summary>
            table name
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_SqlServer.CreateDatabaseObject">
            <summary>
            This object is speical for sql server
            Becuase the properties in login info didn't has all the necessary data
            so add this object ,this will be used when create database
            </summary>
        </member>
        <member name="T:CoreEA.LoginInfo.LoginInfo_SSCE">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_SSCE.DbName">
            <summary>
            Database name
            same to database file full path
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_SSCE.Pwd">
            <summary>
            /
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_SSCE.IsEncrypted">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_SSCE.CurOpenMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_SSCE.IsCaseSensitive">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_SSCE.MaxDbSize">
            <summary>
            Default is 256M 
            Recommend set it when you know it .
            The max value is 4GB(4000M) in CE3.5
            
            </summary>
        </member>
        <member name="P:CoreEA.LoginInfo.LoginInfo_SSCE.MaxBufferSize">
            <summary>
            Default is 1024M
            Recommend set it when you know it.
            </summary>
        </member>
        <member name="P:CoreEA.OledbRobot.CurrentCommandTextHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:CoreEA.OledbRobot.MatchAdoDbType(System.Int32)">
            <summary>
            
            </summary>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.OledbRobot.GetSystemViewList">
            <summary>
            This db type don't has such views
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreEA.OledbRobot.GetProviderInfoFromTable(System.String)">
            <summary>
            Not Implement
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.OledbRobot.GetTableListInDatabase(System.String)">
            <summary>
            
            </summary>
            <param name="databaseName">
            In access ,this para is not used ever
            Like SSCE ,Recommend use this base method with( no parameter)</param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.OledbRobot.Open(CoreEA.LoginInfo.BaseLoginInfo)">
            <summary>
            Notice: 
            Because OleDB Suppor many db types . 
            So the UsingOleDbType property in LoginInfo should be specifed. otherwise will use default db type -->Here is Access
            </summary>
            <param name="pInfo"></param>
        </member>
        <member name="M:CoreEA.OledbRobot.GetSchemaTable">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:CoreEA.Args.OpenModeClass">
            <summary>
            Swith open db mode args
            </summary>
        </member>
        <member name="P:CoreEA.Args.OpenModeClass.mode">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.Args.OpenModeClass.modeDisplayName">
            <summary>
            Read Write
            Read Only
            Shared Read
            Exclusive
            </summary>
        </member>
        <member name="M:CoreEA.Args.OpenModeClass.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:CoreEA.Args.CurDbServerConnMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:CoreEA.Args.CurDbServerConnMode.SqlServer2000">
            <summary>
            
            
            </summary>
        </member>
        <member name="F:CoreEA.Args.CurDbServerConnMode.Local">
            <summary>
            
            </summary>
        </member>
        <member name="F:CoreEA.Args.CurDbServerConnMode.Standard">
            <summary>
            
            </summary>
        </member>
        <member name="F:CoreEA.Args.CurDbServerConnMode.SqlServer2005Express">
            <summary>
            
            </summary>
        </member>
        <member name="F:CoreEA.Args.CurDbServerConnMode.OleDb">
            <summary>
            
            </summary>
        </member>
        <member name="F:CoreEA.Args.CurDbServerConnMode.AttachFile">
            <summary>
            
            </summary>
        </member>
        <member name="F:CoreEA.Args.CurDbServerConnMode.SqlServer2008Express">
            <summary>
            
            </summary>
        </member>
        <member name="F:CoreEA.Args.CurDbServerConnMode.SqlServer2005">
            <summary>
            Support Mars(Mutliple Active Result)
            This type will solve such error 
            [There is already an open DataReader associated with this Command which must be closed first]
            </summary>
        </member>
        <member name="T:CoreEA.Args.OpenMode">
            <summary>
            For SSCE Opening Mode
            </summary>
        </member>
        <member name="F:CoreEA.Args.OpenMode.ReadWrite">
            <summary>
              	Permits multiple processes to open and modify the database.
            </summary>
        </member>
        <member name="F:CoreEA.Args.OpenMode.ReadOnly">
            <summary>
            Lets you open a read-only copy of the database
            </summary>
        </member>
        <member name="F:CoreEA.Args.OpenMode.Exclusive">
            <summary>
            Does not permit other processes to open or modify the database.
            </summary>
        </member>
        <member name="F:CoreEA.Args.OpenMode.SharedRead">
            <summary>
            Permits other processes to read, but not modify, the database while you have it open.
            </summary>
        </member>
        <member name="T:CoreEA.Args.CreateTableArgs">
            <summary>
            Args for create table and modify table schema using
            </summary>
        </member>
        <member name="P:CoreEA.Args.CreateTableArgs.fieldName">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.Args.CreateTableArgs.dataType">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.Args.CreateTableArgs.dataLength">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.Args.CreateTableArgs.isUnique">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.Args.CreateTableArgs.isPrimaryKey">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.Args.CreateTableArgs.allowNulls">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.BaseRobot.CurrentCommandTextHandler">
            <summary>
            For Specifed Sql Command
            </summary>
        </member>
        <member name="M:CoreEA.BaseRobot.#ctor">
            <summary>
            Abstract class protected constructor
            
            </summary>
        </member>
        <member name="M:CoreEA.BaseRobot.InsertData(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.Data.DbType})">
            <summary>
            Recommend do not implement this method in base class
            </summary>
            <param name="tableName"></param>
            <param name="columnName"></param>
            <param name="columnValue"></param>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.BaseRobot.GetDbType">
            <summary>
            Default Result is for SqlServer(SSCE as well)
            
            The max number 35 is according to the value (enum SqlDbType) defined in system.data.dll (current version 4.0)
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreEA.BaseRobot.AddColumnToTable(System.String,CoreEA.SchemaInfo.BaseColumnSchema)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <param name="columnSchema"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.BaseRobot.GetPrimaryKeysFromTable(System.String)">
            <summary>
            SqlServer and SSCE has beed tested ok . with this base method
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.BaseRobot.GetLastId(System.Data.Common.DbConnection)">
            <summary>
            Keep Virtual ,maybe some db is different
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.BaseRobot.GetNewCommandWithGivenParameters(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Data.DbType},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Object})">
            <summary>
            直接生成带有参数的Command
            这个方法整合了AddParameters方法,GetNewCommand方法,CreateParameter方法
            建议使用此方法
            </summary>
            <param name="cmdText"></param>
            <param name="paraName"></param>
            <param name="paraType"></param>
            <param name="paraLength"></param>
            <param name="paraValue"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.BaseRobot.AddParameters(System.Data.Common.DbCommand,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            	Adds any parameters to the command
            </summary>
            <param name="command">The command object you want prepared.</param>
            <param name="parameters">Zero or more parameters to add to the command.</param>
        </member>
        <member name="M:CoreEA.BaseRobot.AddParameters(System.Data.Common.DbCommand,System.Data.Common.DbParameter[])">
            <summary>
            	Adds any parameters to the command
            </summary>
            <param name="command">The command object you want prepared.</param>
            <param name="parameters">Zero or more parameters to add to the command.</param>
        </member>
        <member name="M:CoreEA.BaseRobot.CreateParameter(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            	Creates a new parameter and sets the name of the parameter.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="type">The type of the parameter.</param>
            <param name="size">The size of this parameter.</param>
            <param name="value">
            	The value you want assigned to this parameter. A null value will be converted to
            	a <see cref="T:System.DBNull"/> value in the parameter.
            </param>
            <returns>
            	A new <see cref="T:System.Data.Common.DbParameter"/> instance of the correct type for this database.</returns>
            <remarks>
            	The database will automatically add the correct prefix, like "@" for SQL Server, to the
            	parameter name. In other words, you can just supply the name without a prefix.
            </remarks>
        </member>
        <member name="M:CoreEA.BaseRobot.GetColumnInfoFromTable(System.String)">
            <summary>
            Keep Virtual ,maybe some db is different
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.BaseRobot.GetDefaultByType(System.Data.DbType)">
            <summary>
            Get a default value for a given data type
            </summary>
            <param name="dataType">Data type for which to get the default value</param>
            <returns>An object of the default value.</returns>
        </member>
        <member name="M:CoreEA.BaseRobot.GetDbTypeFromTypeName(System.String)">
            <summary>
            
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="P:CoreEA.BaseRobot.IsOpened">
            <summary>
            No need to override
            </summary>
        </member>
        <member name="M:CoreEA.BaseRobot.GetCreatePrimaryKeySqlString(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Get The Create Primary Key String
            </summary>
            <param name="pKeyList"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.BaseRobot.CreateTable(CoreEA.SchemaInfo.BaseTableSchema)">
            <summary>
            Looks there no other robot override this method
            </summary>
            <param name="tableSchema"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.BaseRobot.GetDataColumnObjectByName(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.BaseRobot.GetDataByColumnNameAndValue(System.String,System.String,System.String)">
            <summary>
            Retrive the record by given column id and it's value
            </summary>
            <param name="tableName"></param>
            <param name="columnName"></param>
            <param name="columnValue"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.BaseRobot.SetConnection(System.Data.Common.DbConnection)">
            <summary>
            Need Pay attention to this method . 
            May by will interrupt current wrapper
            </summary>
            <param name="dbConn"></param>
        </member>
        <member name="M:CoreEA.BaseRobot.GetNewCommand">
            <summary>
            This method is always override by Inherited Class
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreEA.BaseRobot.Close">
            <summary>
            No need to override
            </summary>
        </member>
        <member name="M:CoreEA.BaseRobot.GetAllDataFromTable(System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Get all record from a table by given table name
            </summary>
            <param name="tableName"></param>
            <param name="orderbyOwner"></param>
            <param name="IsDesc"></param>
            <param name="recordCount"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.BaseRobot.GetTableListInDatabase">
            <summary>
            Some database no need specified the database
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreEA.BaseRobot.DeleteDuplicateData(System.String,System.String,System.String)">
            <summary>
            Delete Duplicate Data
            </summary>
            <param name="tableName"></param>
            <param name="primaryKeyName"></param>
            <param name="matchColumnName"></param>
        </member>
        <member name="M:CoreEA.BaseRobot.SelectDataFromNtoNByPrimaryKey(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            查找某条记录N到M的
            </summary>
            <param name="tableName"></param>
            <param name="primaryKeyName"></param>
            <param name="FromN"></param>
            <param name="ToN"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.BaseRobot.RemoveAllData(System.String)">
            <summary>
            Remove all data according to the tablename
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:CoreEA.BaseRobot.DoExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes the query for <paramref name="command"/>.
            </summary>
            <param name="command">The <see cref="T:System.Data.Common.DbCommand"/> representing the query to execute.</param>
            <returns>The quantity of rows affected.</returns>
        </member>
        <member name="M:CoreEA.BaseRobot.DoExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.BaseRobot.Dispose">
            <summary>
            No need to override
            </summary>
        </member>
        <member name="M:CoreEA.BaseRobot.GetDatabaseList">
            <summary>
            This method can not abstract
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreEA.BaseRobot.Open(CoreEA.LoginInfo.BaseLoginInfo)">
            <summary>
            如果当前的HANDLE 已经打开或者拥有CONNECTION则不会再次创建联接
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:CoreEA.BaseRobot.Open(System.String)">
            <summary>
            如果当前的HANDLE 已经打开或者拥有CONNECTION则不会再次创建联接
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:CoreEA.BaseRobot.GetTableListInDatabase(System.String)">
            <summary>
            Please pay attention to this method 
            We have another same name method which no need parameters
            When using ServerSide hosted db ,please use this method
            otherwise use no parameter method 
            </summary>
            <param name="databaseName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.BaseRobot.GetMaskedTableName(System.String)">
            <summary>
            Get the mask char when query with table name 
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreEA.BaseRobot.GetMaskedColumnName(System.String)">
            <summary>
            Get the mask char when query with column name 
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreEA.BaseRobot.GetColumnLength(System.String,System.String)">
            <summary>
            Get Column Length From Various Db Type
            </summary>
            <param name="tableName"></param>
            <param name="columName"></param>
            <returns></returns>
        </member>
        <member name="T:CoreEA.Exceptions.SubClassMustImplementException">
            <summary>
            /
            </summary>
        </member>
        <member name="P:CoreEA.Exceptions.SubClassMustImplementException.Message">
            <summary>
            
            </summary>
        </member>
        <member name="T:CoreEA.Exceptions.NotImplement">
            <summary>
            /
            </summary>
        </member>
        <member name="P:CoreEA.Exceptions.NotImplement.Message">
            <summary>
            
            </summary>
        </member>
        <member name="T:CoreEA.Exceptions.ConnectErrorException">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.Exceptions.ConnectErrorException.Message">
            <summary>
            
            </summary>
        </member>
        <member name="T:CoreEA.GlobalDefine.DoBusinessParas">
            <summary>
            This class is used by AutoCodeMachine
            </summary>
        </member>
        <member name="P:CoreEA.GlobalDefine.DoBusinessParas.UID">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.GlobalDefine.DoBusinessParas.Port">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.GlobalDefine.DoBusinessParas.Server">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.GlobalDefine.DoBusinessParas.Pwd">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.GlobalDefine.DoBusinessParas.IsEncrypted">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.GlobalDefine.DoBusinessParas.DatabaseName">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.GlobalDefine.DoBusinessParas.TableName">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.GlobalDefine.DoBusinessParas.NamespaceName">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.GlobalDefine.DoBusinessParas.ClassName">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.GlobalDefine.DoBusinessParas.OutputFolderName">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.GlobalDefine.DoBusinessParas.IsAttachedFile">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.GlobalDefine.DoBusinessParas.ConnectionString">
            <summary>
            
            </summary>
        </member>
        <member name="M:CoreEA.GlobalDefine.DoBusinessParas.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="connectionStr"></param>
        </member>
        <member name="M:CoreEA.GlobalDefine.DoBusinessParas.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:CoreEA.GlobalDefine.DoBusinessParas.#ctor(System.String,System.String)">
             <summary>
            
             </summary>
             <param name="tableName"></param>
             <param name="databaseName"> If Not Sever Base DB , the database is the db file name </param>
        </member>
        <member name="M:CoreEA.GlobalDefine.DoBusinessParas.#ctor(System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <param name="databaseName">If Not Sever Base DB , the database is the db file name </param>
            <param name="server"></param>
            <param name="uid"></param>
            <param name="pwd"></param>
            <param name="port"></param>
        </member>
        <member name="T:CoreEA.GlobalDefine.GlobalExtension">
            <summary>
            
            </summary>
        </member>
        <member name="M:CoreEA.GlobalDefine.GlobalExtension.IsDBNull(System.Object)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.GlobalDefine.GlobalExtension.IsContaintPrimaryColumn(System.Collections.Generic.List{CoreEA.SchemaInfo.BasePrimaryKeyInfo},System.String)">
            <summary>
            
            </summary>
            <param name="pInfo"></param>
            <param name="targetColumnName"></param>
            <returns></returns>
        </member>
        <member name="T:CoreEA.GlobalDefine.SP">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.GlobalDefine.SP.X_InvalidParameters">
            <summary>
            Error info when received the invalid msg
            </summary>
        </member>
        <member name="P:CoreEA.GlobalDefine.SP.X_OpenDbErrorString">
            <summary>
            Opening Database error string
            </summary>
        </member>
        <member name="F:CoreEA.GlobalDefine.SP.ErrorNumber">
            <summary>
            Error Number when retrive the max  id 
            It will return this value if error occured
            </summary>
        </member>
        <member name="T:CoreEA.GlobalExtension">
            <summary>
            Some methods in this extension class maybe existed in other common library
            But due to wanna keep undependent on other libraries
            So leave these method standalone . 
            </summary>
        </member>
        <member name="M:CoreEA.GlobalExtension.不是空的(System.String)">
            <summary>
            Global Extension Method
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:CoreEA.CoreE">
            <summary>
            Core Enterprise Action Class Library
            </summary>
        </member>
        <member name="P:CoreEA.CoreE.X_Handler">
            <summary>
            
            </summary>
        </member>
        <member name="T:CoreEA.CoreE.UsedDatabaseType">
            <summary>
            Database Type which used
            This enum is used when create CoreEA ,
            It Specfied the return Interface Handler 
            It's vital
            </summary>
        </member>
        <member name="F:CoreEA.CoreE.UsedDatabaseType.OleDb">
            <summary>
            
            </summary>
        </member>
        <member name="F:CoreEA.CoreE.UsedDatabaseType.SqlServer">
            <summary>
            
            </summary>
        </member>
        <member name="F:CoreEA.CoreE.UsedDatabaseType.MySql">
            <summary>
            mysql server 5.0
            </summary>
        </member>
        <member name="F:CoreEA.CoreE.UsedDatabaseType.SqlCE35">
            <summary>
            Sql server compact edition 3.5
            </summary>
        </member>
        <member name="F:CoreEA.CoreE.UsedDatabaseType.Sqlite">
            <summary>
            
            </summary>
        </member>
        <member name="F:CoreEA.CoreE.UsedDatabaseType.Firebird">
            <summary>
            
            </summary>
        </member>
        <member name="F:CoreEA.CoreE.UsedDatabaseType.CSV">
            <summary>
            
            </summary>
        </member>
        <member name="F:CoreEA.CoreE.UsedDatabaseType.Excel">
            <summary>
            
            </summary>
        </member>
        <member name="F:CoreEA.CoreE.UsedDatabaseType.Oracle">
            <summary>
            
            </summary>
        </member>
        <member name="F:CoreEA.CoreE.UsedDatabaseType.Effiproz">
            <summary>
            
            </summary>
        </member>
        <member name="M:CoreEA.CoreE.#ctor(CoreEA.CoreE.UsedDatabaseType)">
            <summary>
            Constructor 1:
            According to the DBTYpe , return a Core
            Use the default db connection method 'oledb'
            </summary>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="T:CoreEA.ICoreEAHander">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.ICoreEAHander.CurrentCommandTextHandler">
            <summary>
            For Command text collections 
            </summary>
        </member>
        <member name="M:CoreEA.ICoreEAHander.GetDbType">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.ChangePassword(CoreEA.SchemaInfo.UserTokenInfo)">
            <summary>
            Change username 
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.AddColumnToTable(System.String,CoreEA.SchemaInfo.BaseColumnSchema)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <param name="columnSchema"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.GetLoginInfo">
            <summary>
            Get the login info 
            like get the connection string 
            This is useful when reuse it or get the connection info
            Such as :Detect which oledbtype current connected (is CSV ,asscess or others)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.GetCreatePrimaryKeySqlString(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Get the Create primary key sql query string 
            </summary>
            <param name="pKeyList"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.GetCreateTableString(CoreEA.SchemaInfo.BaseTableSchema)">
            <summary>
            This Method Called By CreateTable
            This Method also can be called external if you just need the sql query string
            This method will get primarykey , column ,indexes, 
            </summary>
            <param name="ts"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.CreateTable(CoreEA.SchemaInfo.BaseTableSchema)">
            <summary>
            Create Table
            This method create primarykey , column ,indexes, 
            Base method
            </summary>
            <param name="tableSchema"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.GetMaskedTableName(System.String)">
            <summary>
            Get The Masked Table Name
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.GetMaskedColumnName(System.String)">
            <summary>
            Get the mask char when query with column name 
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.GetTableSchemaInfoObject(System.String)">
            <summary>
            This method will rely on GetTableSchemaInfoObject
            so ,please notice :
            Some db type such as :SSCE,SqlServer has already implement this method
            but others are not . It will process the result from GetTableSchemaInfoObject
            so ,if have time, we should implement this method for all db type
            
            Get table schema info 
            Include :
            Column Info
            Index Info
            Constraint Info
            Primrary key info
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.HasIdentityColumnInTable(System.String)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.GetPrimaryKeysFromTable(System.String)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="P:CoreEA.ICoreEAHander.HostedType">
            <summary>
            For Reflect using 
            Detect the Current CoreEA Type
            </summary>
        </member>
        <member name="P:CoreEA.ICoreEAHander.MaxTableNameLength">
            <summary>
            Table name max length
            Diffient value according to different db type
            </summary>
        </member>
        <member name="P:CoreEA.ICoreEAHander.CurDatabase">
            <summary>
            Current Opened Database ,Only useful when connect to Server based Db
            </summary>
        </member>
        <member name="P:CoreEA.ICoreEAHander.CurPwd">
            <summary>
            
            </summary>
        </member>
        <member name="M:CoreEA.ICoreEAHander.GetSystemViewList">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.GetSystemViewColumnsNameByViewName(System.String)">
            <summary>
            
            </summary>
            <param name="viewName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.RemoveAllData(System.String)">
            <summary>
            Remove data in table 
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:CoreEA.ICoreEAHander.SelectDataFromNtoNByPrimaryKey(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Select data from N to N by PKey
            </summary>
            <param name="tableName"></param>
            <param name="primaryKeyName"></param>
            <param name="FromN"></param>
            <param name="ToN"></param>
        </member>
        <member name="M:CoreEA.ICoreEAHander.DeleteDuplicateData(System.String,System.String,System.String)">
            <summary>
            Delete Duplicate Data
            </summary>
            <param name="tableName"></param>
            <param name="primaryKeyName"></param>
            <param name="matchColumnName"></param>
        </member>
        <member name="M:CoreEA.ICoreEAHander.GetStoredProceduresList">
            <summary>
            Get the SP from server based DB
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.GetViews">
            <summary>
            Get Views
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.GetColumnLength(System.String,System.String)">
            <summary>
            This method currenmly return ONly Text Type Column Data length
            </summary>
            <param name="tableName"></param>
            <param name="columName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.GetDefaultByType(System.Data.DbType)">
            <summary>
            Get the default value of DbType
            </summary>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.GetSupportedDbType">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.GetProviderInfoFromTable(System.String)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.GetKeyColumnInfoFromTable(System.String)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.GetIndexInfoFromTable(System.String)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.GetIndexNameListFromTable(System.String)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.InsertData(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.Data.DbType})">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <param name="columnName"></param>
            <param name="columnValue"></param>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.GetColumnNameListFromTable(System.String)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.CreateTableWithSchemaInfo(System.Collections.Generic.List{CoreEA.Args.CreateTableArgs},System.String)">
            <summary>
            Create table with schema info 
            But the schema info is old format , so it is obsolete 
            </summary>
            <param name="args"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.GetColumnInfoFromTable(System.String)">
            <summary>
            Get the column info from the table schema
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.GetNewCommandWithGivenParameters(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Data.DbType},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Object})">
            <summary>
            
            </summary>
            <param name="cmdText"></param>
            <param name="paraName"></param>
            <param name="paraType"></param>
            <param name="paraLength"></param>
            <param name="paraValue"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.AddParameters(System.Data.Common.DbCommand,System.Data.Common.DbParameter[])">
            <summary>
            
            </summary>
            <param name="command"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:CoreEA.ICoreEAHander.AddParameters(System.Data.Common.DbCommand,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            
            </summary>
            <param name="command"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:CoreEA.ICoreEAHander.GetLastId(System.Data.Common.DbConnection)">
            <summary>
            Get lastest id
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.DoExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.DoExecuteReader(System.Data.Common.DbCommand,System.Data.CommandBehavior)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <param name="cmdBehavior"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.DoExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <returns>If -1 indicate failure</returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.CreateParameter(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="size"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.ExecuteDataList(System.Data.Common.DbCommand)">
            <summary>
            Execute db command and return a result to dataset
            </summary>
            <param name="dbCmd"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.GetNewCommand">
            <summary>
            Get Created new Command
            </summary>
            <returns>DbCommand</returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.GetNewStringCommand(System.String)">
            <summary>
            Get Created new command with sql text
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.GetConnection">
            <summary>
            Get Current Open Connection
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.SetConnection(System.Data.Common.DbConnection)">
            <summary>
            Set the Connection 
            This method may be will interrupt the current model.
            Please check it ,and pay necessary attention on it . 
            </summary>
            <returns></returns>
            
        </member>
        <member name="M:CoreEA.ICoreEAHander.GetTriggersInfo">
            <summary>
            Get Triggers
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.GetSchemaTable">
            <summary>
            Get the Schema Info of current table binding to the connection
            ,If you need the sql command or object , 
            please use GetTableSchemaInfoObject method
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.CreateDatabase(CoreEA.LoginInfo.BaseLoginInfo)">
            <summary>
            Create Database
            This method no need to open connection first
            </summary>
            <param name="loginInfo"></param>
            <returns></returns>
        </member>
        <member name="P:CoreEA.ICoreEAHander.LastErrorMsg">
            <summary>
            Last Error Msg From Interface 
            </summary>
        </member>
        <member name="P:CoreEA.ICoreEAHander.IsOpened">
            <summary>
            Indicate the db is opened or not
            Common used when check db connection status 
            </summary>
        </member>
        <member name="M:CoreEA.ICoreEAHander.Open(CoreEA.LoginInfo.BaseLoginInfo)">
            <summary>
            open a db connection
            如果当前的HANDLE 已经打开或者拥有CONNECTION则不会再次创建联接
            </summary>
            <param name="info">Login info to connect</param>
        </member>
        <member name="M:CoreEA.ICoreEAHander.Open(System.String)">
            <summary>
            Open a db connection using connection string
            This is used by website in common.
            如果当前的HANDLE 已经打开或者拥有CONNECTION则不会再次创建联接
            </summary>
            <param name="connectingString">Connection String</param>
        </member>
        <member name="M:CoreEA.ICoreEAHander.Close">
            <summary>
            Close current db connection
            </summary>
        </member>
        <member name="M:CoreEA.ICoreEAHander.GetAllDataFromTable(System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Get the data as DataSet from the specified table 
            If the recordCount set 0 ,it will retrive all the records in the table
            </summary>
            <param name="tableName">The table info was in info argument</param>
            <param name="IsDesc">Orderby desc or not,it used when the orderByOwner is set with non-empty value</param>
            <param name="orderbyOwner">which column need orderby,if no need order by ,this should be set with empty string</param>
            <param name="recordCount">Count of Retrived Record ,it used when this value is not 0 </param>
        </member>
        <member name="M:CoreEA.ICoreEAHander.GetAllDataFromTable(System.String)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.GetTableListInDatabase">
            <summary>
            Get Current Opened database tableList
            Maybe only support in server side database with mutli database host
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.GetTableListInDatabase(System.String)">
            <summary>
            Get the table list in one database
            
            Please pay attention to this method 
            We have another same name method which no need parameters
            When using ServerSide hosted db ,please use this method
            otherwise use no parameter method 
            </summary>
            <param name="databaseName">database name</param>
            <returns>data list</returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.CreateTableWithSql(System.String)">
            <summary>
            Create table with input sql command string
            </summary>
            <param name="sqlCmd">the sql command string</param>
            <returns>create successful or not</returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.GetDatabaseList">
            <summary>
            Get the Database list in one db server
            </summary>
            <returns>databases list</returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.DoExecuteNonQuery(System.String)">
            <summary>
            Exe Sql Cmd With no result return 
            </summary>
            <param name="sqlCmd">Sql Command </param>
            <returns>indicate the command is successful or failure</returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.DoExecuteScalar(System.String)">
            <summary>
            Exe Sql Cmd with result return
            Return The first row and the first column value of the result object
            according to the sql command
            </summary>
            <param name="sqlCmd">sql command string</param>
            <returns>The first row and the first column value of the result object</returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.ExecuteDataList(System.String)">
            <summary>
            Exe Sql Command with result return
            Return the all records in the result
            according to the sql command
            </summary>
            <param name="sqlCmd">sql command string </param>
            <returns>All record in the result</returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.GetDataByColumnNameAndValue(System.String,System.String,System.String)">
            <summary>
            Get one data from table which column equal the column value 
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">the specfied column name</param>
            <param name="columnValue">ths specfied column name's value</param>
            <returns>dataset</returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.GetMaxIDFromTable(System.String,System.String)">
            <summary>
            Get Max ID Value in Table 
            </summary>
            <param name="tableName">Table name</param>
            <param name="IdName">Id Column Name ,In general is "ID" or "id"</param>
            <returns>the max id in the data</returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.ExecuteProcedureWithNoQuery(System.String,System.Object[],System.Data.OleDb.OleDbType[],System.Int32[],System.Object[],System.Object[])">
            <summary>
            Execture sql procedure 
            </summary>
            <param name="procedureName">stored procedure name</param>
            <param name="varList">list of vars</param>
            <param name="dbTypeList">list of vars' type</param>
            <param name="objectLengthList">lenght list of objects</param>
            <param name="objectList">list of objects</param>
            <param name="objectValueList">list of objects' value</param>
            <returns>successful or not</returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.DeleteOneRecordInTable(System.String,System.String,System.String)">
            <summary>
            Delete one record in table
            </summary>
            <param name="tableName">Table name</param>
            <param name="recordId">column name(or id) </param>
            <param name="recordValue">column value</param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.ExecuteTransactionList(System.Collections.Generic.List{System.String})">
            <summary>
            Execute the command sql via Transaction
            </summary>
            <param name="sqlList"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.ExecuteTransactionList(System.Collections.Generic.List{System.Data.Common.DbCommand})">
            <summary>
            Execute the command via Transaction
            </summary>
            <param name="sqlCmdList"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.GetDbTypeFromTypeName(System.String)">
            <summary>
            Get DbType from sqlsever datacolumn type string name    
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.DeleteTable(System.String)">
            <summary>
            Drop a table 
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.ICoreEAHander.SubmitChanges">
            <summary>
            Some database need call this submitchanges to complete the data actons.
            Otherwise the data which operated will be not saved.
            </summary>
        </member>
        <member name="P:CoreEA.MySqlRobot.CurrentCommandTextHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:CoreEA.MySqlRobot.GetDbType">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreEA.MySqlRobot.BuildColumnStatement(CoreEA.SchemaInfo.BaseColumnSchema)">
            <summary>
            Used when creating the CREATE TABLE DDL. Creates a single row
            for the specified column.
            </summary>
            <param name="eachColumn">The column schema</param>
            <returns>A single column line to be inserted into the general CREATE TABLE DDL statement</returns>
        </member>
        <member name="M:CoreEA.MySqlRobot.GetSystemViewList">
            <summary>
            This db type don't has such view
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreEA.MySqlRobot.GetProviderInfoFromTable(System.String)">
            <summary>
            Not Implement
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="P:CoreEA.MySqlRobot.MaxTableNameLength">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.MySqlRobot.MaxColumnNameLength">
            <summary>
            
            </summary>
        </member>
        <member name="M:CoreEA.MySqlRobot.GetDatabaseList">
            <summary>
            Get Database List 
            
            Another method is retrieve from baseConn.GetSchema("Databases");
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreEA.MySqlRobot.GetColumnInfoFromTable(System.String)">
            <summary>
            Please notice : the second para of GetSchema Method
            null,null,tableName,null
            Each value is mapping to : Database , UID ,TableName , ColumnName
            
              <Columns>
             <TABLE_SCHEMA>mysql</TABLE_SCHEMA>
             <TABLE_NAME>user</TABLE_NAME>
             <COLUMN_NAME>Host</COLUMN_NAME>
             <ORDINAL_POSITION>1</ORDINAL_POSITION>
            <COLUMN_DEFAULT />
             <IS_NULLABLE>NO</IS_NULLABLE>
             <DATA_TYPE>char</DATA_TYPE>
             <CHARACTER_MAXIMUM_LENGTH>60</CHARACTER_MAXIMUM_LENGTH>
             <CHARACTER_SET_NAME>utf8</CHARACTER_SET_NAME>
             <COLLATION_NAME>utf8_bin</COLLATION_NAME>
             <COLUMN_TYPE>char(60)</COLUMN_TYPE>
             <COLUMN_KEY>PRI</COLUMN_KEY>
             <EXTRA />
             <PRIVILEGES>select,insert,update,references</PRIVILEGES>
             <COLUMN_COMMENT />
             </Columns>
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.MySqlRobot.GetIndexInfoFromTable(System.String)">
             <summary>
             Please notice : the second para of GetSchema Method
             null,null,tableName,null
             Each value is mapping to : Database , UID ,TableName , ColumnName
               <Indexes>
            <INDEX_SCHEMA>mysql</INDEX_SCHEMA>
            <INDEX_NAME>PRIMARY</INDEX_NAME>
            <TABLE_NAME>user</TABLE_NAME>
            <UNIQUE>true</UNIQUE>
            <PRIMARY>true</PRIMARY>
            </Indexes>
             </summary>
             <param name="tableName"></param>
             <returns></returns>
        </member>
        <member name="M:CoreEA.MySqlRobot.GetStoredProceduresList">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreEA.MySqlRobot.GetTableListInDatabase(System.String)">
            <summary>
            Get Table list in which database
            </summary>
            <param name="dbName"></param>
            <returns></returns>
        </member>
        <member name="P:CoreEA.Oracle.OracleRobot.CurrentCommandTextHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:CoreEA.Oracle.OracleRobot.GetPrimaryKeysFromTable(System.String)">
            <summary>
            No Index Info
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.Oracle.OracleRobot.GetSystemViewList">
            <summary>
            This db type don't has such views
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreEA.Oracle.OracleRobot.GetProviderInfoFromTable(System.String)">
            <summary>
            Not Implement
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.Oracle.OracleRobot.GetMaskedTableName(System.String)">
            <summary>
            "" is the mask
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.Oracle.OracleRobot.GetColumnInfoFromTable(System.String)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.Oracle.OracleRobot.GetTableListInDatabase(System.String)">
            <summary>
            
            </summary>
            <param name="databaseName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.Oracle.OracleRobot.Open(CoreEA.LoginInfo.BaseLoginInfo)">
            <summary>
            Notice: 
            Because OleDB Suppor many db types . 
            So the UsingOleDbType property in LoginInfo should be specifed. otherwise will use default db type -->Here is Oracle
            </summary>
            <param name="pInfo"></param>
        </member>
        <member name="T:CoreEA.SchemaInfo.BaseColumnSchema">
            <summary>
            
            </summary>
        </member>
        <member name="M:CoreEA.SchemaInfo.BaseColumnSchema.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseColumnSchema.ColumnName">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseColumnSchema.ColumnType">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseColumnSchema.IsNullable">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseColumnSchema.DefaultValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseColumnSchema.IsIdentity">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseColumnSchema.CharacterMaxLength">
            <summary>
            Some database has not this property.
            So we should replaced it by common property :
            ColumnLength
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseColumnSchema.ColumnLength">
            <summary>
            Default value is 0.0d;
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseColumnSchema.NumericPrecision">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseColumnSchema.NumericScale">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseColumnSchema.OrdinalPosition">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseColumnSchema.AutoIncrementBy">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseColumnSchema.AutoIncrementSeed">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseColumnSchema.RowGuidCol">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseColumnSchema.IsAutoIncrement">
            <summary>
            
            </summary>
        </member>
        <member name="T:CoreEA.SchemaInfo.BaseIndexSchema">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseIndexSchema.TableName">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseIndexSchema.IndexName">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseIndexSchema.ColumnName">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseIndexSchema.IsAscending">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseIndexSchema.IsUnique">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseIndexSchema.IsPrimaryKey">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseIndexSchema.IsClustered">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseIndexSchema.OrdinalPosition">
            <summary>
            
            </summary>
        </member>
        <member name="T:CoreEA.SchemaInfo.BasePrimaryKeyInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BasePrimaryKeyInfo.ColumnName">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BasePrimaryKeyInfo.PKName">
            <summary>
            	primary key constraint name
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BasePrimaryKeyInfo.KeySequence">
            <summary>
            sequence number within primary key
            </summary>
        </member>
        <member name="T:CoreEA.SchemaInfo.BaseStoredProcedureInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseStoredProcedureInfo.ProcedureName">
            <summary>
            simple routine identifier
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseStoredProcedureInfo.ProcedureCategory">
            <summary>
            	catalog in which routine is defined
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseStoredProcedureInfo.ProcedureSchema">
            <summary>
            schema in which routine is defined
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseStoredProcedureInfo.ProcedureType">
            <summary>
            	"Unknown" or "No Result" or "Returns Result"
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseStoredProcedureInfo.Remarks">
            <summary>
            	explanatory comment on the routine
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseStoredProcedureInfo.SpecificName">
            <summary>
            name which uniquely identifies the procedure within its schema
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseStoredProcedureInfo.ProcedureCode">
            <summary>
            The sql code of sp
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseStoredProcedureInfo.ColumnsInfoInProcedure">
            <summary>
            Columns info in this sp
            </summary>
        </member>
        <member name="T:CoreEA.SchemaInfo.BaseColumnInfoInSP">
            <summary>
            Column info in sp
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseColumnInfoInSP.COLUMN_NAME">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseColumnInfoInSP.TYPE_NAME">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseColumnInfoInSP.DATA_TYPE">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseColumnInfoInSP.COLUMN_SIZE">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseColumnInfoInSP.PRECISION">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseColumnInfoInSP.SCALE">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseColumnInfoInSP.NULLABLE">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseColumnInfoInSP.ORDINAL_POSITION">
            <summary>
            
            </summary>
        </member>
        <member name="T:CoreEA.SchemaInfo.BaseSpType">
            <summary>
            
            </summary>
        </member>
        <member name="F:CoreEA.SchemaInfo.BaseSpType.Unknown">
            <summary>
            
            </summary>
        </member>
        <member name="F:CoreEA.SchemaInfo.BaseSpType.NoResult">
            <summary>
            no return value :1
            </summary>
        </member>
        <member name="F:CoreEA.SchemaInfo.BaseSpType.ReturnResult">
            <summary>
            return value
            </summary>
        </member>
        <member name="T:CoreEA.SchemaInfo.BaseTableSchema">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseTableSchema.TableCatalog">
            <summary>
            The Catalog of Table 
            For example : A Table named [TestTable] is existed under [MyDb] Database ,
            the [MyDb] is the catalog
            File based database has no using of this property
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseTableSchema.TableName">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseTableSchema.Columns">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseTableSchema.PrimaryKey">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseTableSchema.Indexes">
            <summary>
            
            </summary>
        </member>
        <member name="M:CoreEA.SchemaInfo.BaseTableSchema.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:CoreEA.SchemaInfo.BaseTableSchema.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="T:CoreEA.SchemaInfo.BaseTriggerInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseTriggerInfo.TriggerName">
            <summary>
            
            </summary>
        </member>
        <member name="T:CoreEA.SchemaInfo.BaseViewInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.BaseViewInfo.ViewName">
            <summary>
            
            </summary>
        </member>
        <member name="T:CoreEA.SchemaInfo.UserTokenInfo">
            <summary>
            /
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.UserTokenInfo.Username">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.UserTokenInfo.OldPassword">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreEA.SchemaInfo.UserTokenInfo.NewPassword">
            <summary>
            
            </summary>
        </member>
        <member name="M:CoreEA.SqlCERobot.StripParens(System.String)">
            <summary>
            Strip any parentheses from the string.
            </summary>
            <param name="value">The string to strip</param>
            <returns>The stripped string</returns>
        </member>
        <member name="M:CoreEA.SqlCERobot.DiscardNational(System.String)">
            <summary>
            Discards the national prefix if exists (e.g., N'sometext') which is not
            supported in SQLite.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.SqlCERobot.IsValidDefaultValue(System.String)">
            <summary>
            Check if the DEFAULT clause is valid by SQLite standards
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.SqlCERobot.BuildColumnStatement(CoreEA.SchemaInfo.BaseColumnSchema)">
            <summary>
            Used when creating the CREATE TABLE DDL. Creates a single row
            for the specified column.
            </summary>
            <param name="eachColumn">The column schema</param>
            <returns>A single column line to be inserted into the general CREATE TABLE DDL statement</returns>
        </member>
        <member name="M:CoreEA.SqlCERobot.BuildCreateIndex(System.String,System.Collections.Generic.List{CoreEA.SchemaInfo.BaseIndexSchema})">
             <summary>
             Creates a CREATE INDEX DDL for the specified table and index schema.
             </summary>
             <param name="tableName">The name of the indexed table.</param>
            <param name="indexSchemas">The schema of the index objects</param>
             <returns>A CREATE INDEX DDL (SQLite format).</returns>
        </member>
        <member name="P:CoreEA.SqlCERobot.CurrentCommandTextHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:CoreEA.SqlCERobot.GetStoredProceduresList">
            <summary>
            This db type don't contain such type
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreEA.SqlCERobot.GetTriggersInfo">
            <summary>
            SSCE does not contain triggers 
            so just return a null object
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreEA.SqlCERobot.CreateTableWithSchemaInfo(System.Collections.Generic.List{CoreEA.Args.CreateTableArgs},System.String)">
            <summary>
            
            </summary>
            <param name="args"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.SqlCERobot.GetCreateTableString(CoreEA.SchemaInfo.BaseTableSchema)">
            <summary>
            This method will get primarykey , column ,indexes, 
            </summary>
            <param name="ts"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.SqlCERobot.GetTableSchemaInfoObject(System.String)">
            <summary>
            This method will get primarykey , column ,indexes, 
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="F:CoreEA.SqlCERobot.SystemView_ForIndex">
            <summary>
            Get all infos from schemalinfo
            </summary>
        </member>
        <member name="F:CoreEA.SqlCERobot.SystemView_ForTable">
            <summary>
                    //+		["DATE_MODIFIED"]	{DATE_MODIFIED}	
             //+		["TABLE_TYPE"]	{TABLE_TYPE}	
             //+		["DESCRIPTION"]	{DESCRIPTION}	
             //+		["DATE_CREATED"]	{DATE_CREATED}	
             //+		["TABLE_PROPID"]	{TABLE_PROPID}	
             //+		["TABLE_SCHEMA"]	{TABLE_SCHEMA}	
              //+		["TABLE_GUID"]	{TABLE_GUID}	
                 //+		["TABLE_CATALOG"]	{TABLE_CATALOG}	
                 //+		["TABLE_NAME"]	{TABLE_NAME}	
            </summary>
        </member>
        <member name="M:CoreEA.SqlCERobot.GetSystemViewList">
            <summary>
            Get Readonly Value For SSCE System Views Schema Name
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreEA.SqlCERobot.GetSystemViewColumnsNameByViewName(System.String)">
            <summary>
            Get the SystemViews Info
            </summary>
            <param name="viewName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.SqlCERobot.GetDataAdapter(System.Data.Common.DbCommand)">
            <summary>
            This method is most common ,so no need to check the connection 
            </summary>
            <param name="dbCmd"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.SqlCERobot.GetNewStringCommand(System.String)">
            <summary>
            This method is most common ,so no need to check the connection 
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.SqlCERobot.GetMaskedTableName(System.String)">
            <summary>
            ''
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.SqlCERobot.GetDbTypeFromTypeName(System.String)">
            <summary>
            从Type name 获得具体DbType
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.SqlCERobot.GetKeyColumnInfoFromTable(System.String)">
            <summary>
            Get all Key collumn info 
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.SqlCERobot.GetProviderInfoFromTable(System.String)">
            <summary>
            Get all  info 
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.SqlCERobot.GetSupportedDbType">
            <summary>
            Get all data type supported by sqlce 
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreEA.SqlCERobot.GetIndexInfoFromTable(System.String)">
            <summary>
            Get all indexes info 
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.SqlCERobot.GetColumnInfoFromTable(System.String)">
            <summary>
            Get all columns info
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.SqlCERobot.GetLastId(System.Data.Common.DbConnection)">
            <summary>
            	Returns the ID of the most recently added row.
            </summary>
            <returns>
            	The ID of the row added, or -1 if no row added, or the table doesn't have an identity column.
            </returns>
        </member>
        <member name="M:CoreEA.SqlCERobot.CreateParameter(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="size"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.SqlCERobot.GetTableListInDatabase(System.String)">
            <summary>
            
            </summary>
            <param name="databaseName">
            This parameter is not used in sqlce 
            Recommend use this base method (with no parameter)</param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.SqlCERobot.ExecuteProcedureWithNoQuery(System.String,System.Object[],System.Data.OleDb.OleDbType[],System.Int32[],System.Object[],System.Object[])">
            <summary>
            I am curious about the SSCE support the stored procedure ?
            </summary>
            <param name="procedureName"></param>
            <param name="varList"></param>
            <param name="dbTypeList"></param>
            <param name="objectLengthList"></param>
            <param name="objectList"></param>
            <param name="objectValueList"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.Sqlite.SqliteRobot.StripParens(System.String)">
            <summary>
            Strip any parentheses from the string.
            </summary>
            <param name="value">The string to strip</param>
            <returns>The stripped string</returns>
        </member>
        <member name="M:CoreEA.Sqlite.SqliteRobot.DiscardNational(System.String)">
            <summary>
            Discards the national prefix if exists (e.g., N'sometext') which is not
            supported in SQLite.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.Sqlite.SqliteRobot.IsValidDefaultValue(System.String)">
            <summary>
            Check if the DEFAULT clause is valid by SQLite standards
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.Sqlite.SqliteRobot.BuildColumnStatement(CoreEA.SchemaInfo.BaseColumnSchema)">
            <summary>
            Used when creating the CREATE TABLE DDL. Creates a single row
            for the specified column.
            </summary>
            <param name="col">The column schema</param>
            <returns>A single column line to be inserted into the general CREATE TABLE DDL statement</returns>
        </member>
        <member name="M:CoreEA.Sqlite.SqliteRobot.BuildCreateIndex(System.String,CoreEA.SchemaInfo.BaseIndexSchema)">
            <summary>
            Creates a CREATE INDEX DDL for the specified table and index schema.
            </summary>
            <param name="tableName">The name of the indexed table.</param>
            <param name="indexSchema">The schema of the index object</param>
            <returns>A CREATE INDEX DDL (SQLite format).</returns>
        </member>
        <member name="P:CoreEA.Sqlite.SqliteRobot.CurrentCommandTextHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:CoreEA.Sqlite.SqliteRobot.GetSystemViewList">
            <summary>
            Not Implement
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreEA.Sqlite.SqliteRobot.GetProviderInfoFromTable(System.String)">
            <summary>
            Not Implement
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="P:CoreEA.SqlServerRobot.CurrentCommandTextHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:CoreEA.SqlServerRobot.StripParens(System.String)">
            <summary>
            Strip any parentheses from the string.
            </summary>
            <param name="value">The string to strip</param>
            <returns>The stripped string</returns>
        </member>
        <member name="M:CoreEA.SqlServerRobot.DiscardNational(System.String)">
            <summary>
            Discards the national prefix if exists (e.g., N'sometext') which is not
            supported in SQLite.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.SqlServerRobot.IsValidDefaultValue(System.String)">
            <summary>
            Check if the DEFAULT clause is valid by SQLite standards
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.SqlServerRobot.BuildColumnStatement(CoreEA.SchemaInfo.BaseColumnSchema)">
            <summary>
            Used when creating the CREATE TABLE DDL. Creates a single row
            for the specified column.
            </summary>
            <param name="eachColumn">The column schema</param>
            <returns>A single column line to be inserted into the general CREATE TABLE DDL statement</returns>
        </member>
        <member name="M:CoreEA.SqlServerRobot.BuildCreateIndex(System.String,System.Collections.Generic.List{CoreEA.SchemaInfo.BaseIndexSchema})">
             <summary>
             Creates a CREATE INDEX DDL for the specified table and index schema.
             </summary>
             <param name="tableName">The name of the indexed table.</param>
            <param name="indexSchemas">The schema of the index object</param>
             <returns>A CREATE INDEX DDL (SQLite format).</returns>
        </member>
        <member name="M:CoreEA.SqlServerRobot.GetSystemViewList">
            <summary>
            Not Implement
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreEA.SqlServerRobot.GetProviderInfoFromTable(System.String)">
            <summary>
            Not Implement
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.SqlServerRobot.Open(System.String)">
            <summary>
            When use SqlServerExpress need some notices about ServerName .
            LIke
            "Data Source=DEVUSER-PC\\SQLEXPRESS;Initial Catalog=Infuture_JonnaCloneSite;User Id=DEVUSER-PC\\Administrator;Password=111111;Trusted_Connection=True");
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:CoreEA.SqlServerRobot.Open(CoreEA.LoginInfo.BaseLoginInfo)">
            <summary>
            
            When to use trust connection string (Connect to  online )
            When to ues not trust connection string (Connect to remote or local)
            
            </summary>
            <param name="pInfo"></param>
        </member>
        <member name="M:CoreEA.SqlServerRobot.CreateTable(CoreEA.SchemaInfo.BaseTableSchema)">
            <summary>
            
            </summary>
            <param name="tableSchema"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.SqlServerRobot.GetIndexInfoFromTable(System.String)">
             <summary>
             Get all indexes info 
             
            <id>91147370</id>
            <status>18450</status>
            <first>pwAAAAEA</first>
            <indid>1</indid>
            <root>2QAAAAEA</root>
            <minlen>208</minlen>
            <keycnt>1</keycnt>
            <groupid>1</groupid>
            <dpages>1</dpages>
            <reserved>3</reserved>
            <used>3</used>
            <rowcnt>9</rowcnt>
            <rowmodctr>0</rowmodctr>
            <reserved3>0</reserved3>
            <reserved4>0</reserved4>
            <xmaxlen>1227</xmaxlen>
            <maxirow>28</maxirow>
            <OrigFillFactor>90</OrigFillFactor>
            <StatVersion>0</StatVersion>
            <reserved2>0</reserved2>
            <FirstIAM>wQAAAAEA</FirstIAM>
            <impid>0</impid>
            <lockflags>0</lockflags>
            <pgmodctr>0</pgmodctr>
            <keys>OAE4AAQACgAAAAAAAAAAAAEAAQAAAAAABAABAAAAAAA=</keys>
            <name>PK_InnerMsgContent</name>
            <statblob>BAAAAG5+EACHmwAACQAAAAAAAAAJAA
                AAAAAAADmO4z05juM9AAAAAAAAAAAAAAAAAAA
                AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
                    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
                    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
                        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
                        ACAAAACQAAAAEAAAAUAAAAAACAQAAAEEEAAAAAAACAQAAA
                            AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
                           AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
                               AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
                                AAAAAAAAAAAAAXAAAAAAAAAAAAAAAAAAAAAAAQABQAAACAPwAAAAAAAAAAAA
                                    AAAAQAABAAFAAAAIA/AADgQAAAgD8IAAAABAAA</statblob>
            <maxlen>8000</maxlen>
            <rows>9</rows>
             </summary>
             <param name="tableName"></param>
             <returns></returns>
        </member>
        <member name="M:CoreEA.SqlServerRobot.GetColumnInfoFromTable(System.String)">
            <summary>
            Get all columns info
            Columns has : 
            
                <name>InnerMsgID</name>
               <id>91147370</id>
               <xtype>56</xtype>
              <typestat>1</typestat>
              <xusertype>56</xusertype>
              <length>4</length>
             <xprec>10</xprec>
              <xscale>0</xscale>
              <colid>1</colid>
              <xoffset>4</xoffset>
              <bitpos>0</bitpos>
              <reserved>0</reserved>
              <colstat>0</colstat>
              <cdefault>0</cdefault>
             <domain>0</domain>
            <number>0</number>
            <colorder>1</colorder>
            <offset>2</offset>
              <language>0</language>
              <status>0</status>
              <type>56</type>
              <usertype>7</usertype>
              <prec>10</prec>
             <scale>0</scale>
             <iscomputed>0</iscomputed>
             <isoutparam>0</isoutparam>
             <isnullable>0</isnullable>
             
            The xml will be like following :
            Please notice : the table name in it does not need mask 
            Just here
            <TABLE_CATALOG>ECCDatabase</TABLE_CATALOG>
            <TABLE_SCHEMA>dbo</TABLE_SCHEMA>
             <TABLE_NAME>My TA</TABLE_NAME>
             <COLUMN_NAME>id</COLUMN_NAME>
             <ORDINAL_POSITION>1</ORDINAL_POSITION>
             <IS_NULLABLE>YES</IS_NULLABLE>
             <DATA_TYPE>int</DATA_TYPE>
             <NUMERIC_PRECISION>10</NUMERIC_PRECISION>
             <NUMERIC_PRECISION_RADIX>10</NUMERIC_PRECISION_RADIX>
             <NUMERIC_SCALE>0</NUMERIC_SCALE>
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.SqlServerRobot.GetIdentifyColumnsFromCurrentDatabase">
            <summary>
            Load all the identify column in each table of current databases
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreEA.SqlServerRobot.GetColumnLength(System.String,System.String)">
            <summary>
            This method currenmly return ONly Text Type Column Data length
            </summary>
            <param name="tableName"></param>
            <param name="columName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.SqlServerRobot.InsertData(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.Data.DbType})">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <param name="columnName"></param>
            <param name="columnValue"></param>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.SqlServerRobot.GetStoredProceduresList">
             <summary>
            <name>aspnet_Membership_FindUsersByEmail</name>
            <id>2099048</id>
            <xtype>P </xtype>
            <uid>5</uid>
            <info>0</info>
            <status>536870913</status>
            <base_schema_ver>0</base_schema_ver>
            <replinfo>0</replinfo>
            <parent_obj>0</parent_obj>
            <crdate>2008-05-26T13:44:46.333+08:00</crdate>
            <ftcatid>0</ftcatid>
            <schema_ver>0</schema_ver>
            <stats_schema_ver>0</stats_schema_ver>
            <type>P </type>
            <userstat>0</userstat>
            <sysstat>4</sysstat>
            <indexdel>0</indexdel>
            <refdate>2008-05-26T13:44:46.333+08:00</refdate>
            <version>0</version>
            <deltrig>0</deltrig>
            <instrig>0</instrig>
            <updtrig>0</updtrig>
            <seltrig>0</seltrig>
            <category>0</category>
            <cache>0</cache>
             </summary>
             <returns></returns>
        </member>
        <member name="M:CoreEA.SqlServerRobot.GetDatabaseList">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreEA.SqlServerRobot.GetTableListInDatabase(System.String)">
            <summary>
            Get the table list in given database
            </summary>
            <param name="dbName"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.SqlServerRobot.ExecuteProcedureWithNoQuery(System.String,System.Object[],System.Data.OleDb.OleDbType[],System.Int32[],System.Object[],System.Object[])">
            <summary>
            
            </summary>
            <param name="procedureName"></param>
            <param name="varList"></param>
            <param name="dbTypeList"></param>
            <param name="objectLengthList"></param>
            <param name="objectList"></param>
            <param name="objectValueList"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.SqlServerRobot.CreateParameter(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            	Creates a new parameter and sets the name of the parameter.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="type">The type of the parameter.</param>
            <param name="size">The size of this parameter.</param>
            <param name="value">
            	The value you want assigned to this parameter. A null value will be converted to
            	a <see cref="T:System.DBNull"/> value in the parameter.
            </param>
            <returns>
            	A new <see cref="T:System.Data.Common.DbParameter"/> instance of the correct type for this database.</returns>
            <remarks>
            	The database will automatically add the correct prefix, like "@" for SQL Server, to the
            	parameter name. In other words, you can just supply the name without a prefix.
            </remarks>
        </member>
        <member name="T:CoreEA.Utility.BaseExtension">
            <summary>
            
            </summary>
        </member>
        <member name="T:CoreEA.Utility.EnumSqlServerInstance">
            <summary>
            
            </summary>
        </member>
        <member name="F:CoreEA.Utility.EnumSqlServerInstance.m_SQLServer">
            <summary>
            A string to hold the selected SQL Server
            </summary>
        </member>
        <member name="F:CoreEA.Utility.EnumSqlServerInstance.m_Username">
            <summary>
            A string to hold the username
            </summary>
        </member>
        <member name="F:CoreEA.Utility.EnumSqlServerInstance.m_Password">
            <summary>
            A string to hold the password
            </summary>
        </member>
        <member name="P:CoreEA.Utility.EnumSqlServerInstance.SQLServer">
            <summary>
            Property to set the SQL Server instance
            </summary>
        </member>
        <member name="P:CoreEA.Utility.EnumSqlServerInstance.Username">
            <summary>
            Property to set the Username
            </summary>
        </member>
        <member name="P:CoreEA.Utility.EnumSqlServerInstance.Password">
            <summary>
            Property to set the Password
            </summary>
        </member>
        <member name="M:CoreEA.Utility.EnumSqlServerInstance.EnumerateSQLServers">
            <summary>
            Enumerate the SQL Servers returning a list (if any exist)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreEA.Utility.EnumSqlServerInstance.EnumerateSQLServersDatabases">
            <summary>
            Enumerate the specified SQL server returning a list of databases (if any exist)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreEA.Utility.EnumSqlServerInstance.RetrieveInformation(System.String)">
            <summary>
            Enumerate for SQLServer/Databases based on the passed information it the string
            The more information provided to SQLBrowseConnect the more granular it gets so
            if only DRIVER=SQL SERVER passed then a list of all SQL Servers is returned
            If DRIVER=SQL SERVER;Server=ServerName is passed then a list of all Databases on the
            servers is returned etc
            </summary>
            <param name="InputParam">A valid string to query for</param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.Utility.EnumSqlServerInstance.ParseSQLOutConnection(System.String)">
            <summary>
            Parse an outConnection string returned from SQLBrowseConnect
            </summary>
            <param name="outConnection">string to parse</param>
            <returns></returns>
        </member>
        <member name="T:CoreEA.Utility.TypeConvertor">
            <summary>
            数据库字段类型转换
            </summary>
        </member>
        <member name="M:CoreEA.Utility.TypeConvertor.ParseSqlServerLengthNodeNameFromTypeName(System.String)">
            <summary>
            由于各种类型所存储长度的节点不同，
            因此需要在Sqlserver中根据当前类型名来确定存储字段长度的列名
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.Utility.TypeConvertor.ParseSqlServerDbTypeToSqlCeDbType(System.String,System.Nullable{System.Int32})">
            <summary>
            将sqlserver 类型和长度转换成相对应的SSCE语句
            注意，某些类型即使指定长度，也不作用。因为系统自身限制
            </summary>
            <param name="sqlServerType"></param>
            <param name="length">
            注意这里的Length是可空类型，当为空值时，各类型自己决定长度
            </param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.Utility.TypeConvertor.ParseADODbTypeToSqlCeDbType(System.String,System.Int32)">
            <summary>
            转换Ado类型到SSCE
            </summary>
            <param name="adoType"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:CoreEA.Utility.TypeConvertor.ParseMySqlDbTypeToSqlCeDbType(System.String)">
            <summary>
            转换MySql 类型到SSCE
            </summary>
            <param name="mysqlDbType"></param>
            <returns></returns>
        </member>
    </members>
</doc>
